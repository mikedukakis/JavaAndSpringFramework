-- MySQL Script generated by MySQL Workbench
-- Fri Jun 14 15:38:15 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema youtube
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `youtube` DEFAULT CHARACTER SET utf8 ;
USE `youtube` ;

-- -----------------------------------------------------
-- Table `youtube`.`users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`users` (
  `users_id` INT NOT NULL AUTO_INCREMENT COMMENT 'User ID',
  `users_email` VARCHAR(150) NOT NULL COMMENT 'User email',
  `users_password` VARCHAR(10) NOT NULL COMMENT 'User password',
  `users_username` VARCHAR(25) NOT NULL COMMENT 'Username',
  `users_dob` VARCHAR(45) NOT NULL COMMENT 'User date of birth',
  `users_gender` ENUM('Male', 'Female', 'Other') NOT NULL COMMENT 'User gender',
  `users_country` VARCHAR(45) NOT NULL COMMENT 'User country',
  `users_postcode` VARCHAR(5) NOT NULL COMMENT 'User postcode',
  PRIMARY KEY (`users_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`access_states`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`access_states` (
  `access_states_id` INT NOT NULL AUTO_INCREMENT COMMENT 'ID of access state',
  `access_states_status` ENUM('public', 'hiden', 'private') NOT NULL,
  PRIMARY KEY (`access_states_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`videos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`videos` (
  `videos_id` INT NOT NULL AUTO_INCREMENT COMMENT 'ID for video',
  `videos_description` VARCHAR(255) NOT NULL COMMENT 'Video description',
  `videos_size` INT NOT NULL COMMENT 'Size of video',
  `videos_filename` VARCHAR(255) NOT NULL COMMENT 'Name of file',
  `videos_timelength` VARCHAR(5) NOT NULL COMMENT 'Viedo time length',
  `videos_thumbnail` VARCHAR(255) NOT NULL COMMENT 'Thumbnail for video',
  `videos_views` INT(10) NOT NULL COMMENT 'Count of video views',
  `videos_likes` INT(10) NOT NULL COMMENT 'Count of times video liked',
  `videos_dislikes` INT(10) NOT NULL COMMENT 'Count of times video disliked',
  `videos_time_uploaded` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'When video is uploaded',
  `users_uploader_id` INT NOT NULL COMMENT 'User who uploads video',
  `channels_id` INT NULL COMMENT 'Channel ID',
  `access_states_id` INT NOT NULL COMMENT 'Access state of video',
  PRIMARY KEY (`videos_id`, `users_uploader_id`, `channels_id`),
  INDEX `fk_videos_users_idx` (`users_uploader_id` ASC),
  INDEX `fk_videos_access_states1_idx` (`access_states_id` ASC),
  CONSTRAINT `fk_videos_users`
    FOREIGN KEY (`users_uploader_id`)
    REFERENCES `youtube`.`users` (`users_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_videos_access_states1`
    FOREIGN KEY (`access_states_id`)
    REFERENCES `youtube`.`access_states` (`access_states_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`channels`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`channels` (
  `channels_id` INT NOT NULL AUTO_INCREMENT COMMENT 'ID for channel',
  `channels_name` VARCHAR(255) NOT NULL COMMENT 'Channel name',
  `channels_description` VARCHAR(255) NOT NULL COMMENT 'Channel description',
  `channels_creation_date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Date created',
  `users_id` INT NOT NULL COMMENT 'User who created channel',
  PRIMARY KEY (`channels_id`, `users_id`),
  INDEX `fk_channels_users1_idx` (`users_id` ASC),
  CONSTRAINT `fk_channels_users1`
    FOREIGN KEY (`users_id`)
    REFERENCES `youtube`.`users` (`users_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`tags`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`tags` (
  `tags_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Tag ID',
  `tags_name` VARCHAR(100) NOT NULL COMMENT 'Video tag name',
  PRIMARY KEY (`tags_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`videos_has_tags`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`videos_has_tags` (
  `videos_id` INT NOT NULL COMMENT 'Video ID',
  `users_uploader_id` INT NOT NULL COMMENT 'User who uploaded video',
  `channels_id` INT NOT NULL COMMENT 'Channel ID',
  `channels_users_id` INT NOT NULL COMMENT 'User who created channel',
  `tags_id` INT NOT NULL COMMENT 'Tag ID',
  PRIMARY KEY (`videos_id`, `users_uploader_id`, `channels_id`, `channels_users_id`, `tags_id`),
  INDEX `fk_videos_has_tags_tags1_idx` (`tags_id` ASC),
  INDEX `fk_videos_has_tags_videos1_idx` (`videos_id` ASC, `users_uploader_id` ASC, `channels_id` ASC, `channels_users_id` ASC),
  CONSTRAINT `fk_videos_has_tags_videos1`
    FOREIGN KEY (`videos_id` , `users_uploader_id` , `channels_id`)
    REFERENCES `youtube`.`videos` (`videos_id` , `users_uploader_id` , `channels_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_videos_has_tags_tags1`
    FOREIGN KEY (`tags_id`)
    REFERENCES `youtube`.`tags` (`tags_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`subscriptions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`subscriptions` (
  `subscriptions_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Id for subscription',
  `users_id` INT NOT NULL COMMENT 'ID of subscriber',
  `channels_id` INT NOT NULL COMMENT 'Channel of subscription',
  PRIMARY KEY (`subscriptions_id`),
  INDEX `fk_subscriptions_users1_idx` (`users_id` ASC),
  INDEX `fk_subscriptions_channels1_idx` (`channels_id` ASC),
  CONSTRAINT `fk_subscriptions_users1`
    FOREIGN KEY (`users_id`)
    REFERENCES `youtube`.`users` (`users_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_subscriptions_channels1`
    FOREIGN KEY (`channels_id`)
    REFERENCES `youtube`.`channels` (`channels_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`likes_dislikes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`likes_dislikes` (
  `likes_dislikes_id` INT NOT NULL COMMENT 'ID for like/dislike',
  `likes_dislikes_type` ENUM('like', 'dislike') NOT NULL COMMENT 'Type of interaction (like OR dislike)',
  `likes_dislikes_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Time of like/dislike action',
  `videos_id` INT NOT NULL COMMENT 'ID of video liked/disliked',
  `users_id` INT NOT NULL COMMENT 'ID of user who liked/disliked',
  PRIMARY KEY (`likes_dislikes_id`, `videos_id`, `users_id`),
  INDEX `fk_likes_dislikes_videos1_idx` (`videos_id` ASC),
  INDEX `fk_likes_dislikes_users1_idx` (`users_id` ASC),
  CONSTRAINT `fk_likes_dislikes_videos1`
    FOREIGN KEY (`videos_id`)
    REFERENCES `youtube`.`videos` (`videos_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_likes_dislikes_users1`
    FOREIGN KEY (`users_id`)
    REFERENCES `youtube`.`users` (`users_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`playlists`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`playlists` (
  `playlists_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Playlist ID',
  `playlists_name` VARCHAR(45) NOT NULL COMMENT 'Playlist name',
  `playlists_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Time of creation of playlist',
  `playlists_access_state` ENUM('public', 'private') NOT NULL COMMENT 'Access state of playlist (public OR private)',
  `users_id` INT NOT NULL COMMENT 'ID of user who creates playlist',
  PRIMARY KEY (`playlists_id`, `users_id`),
  INDEX `fk_playlists_users1_idx` (`users_id` ASC),
  CONSTRAINT `fk_playlists_users1`
    FOREIGN KEY (`users_id`)
    REFERENCES `youtube`.`users` (`users_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`playlists_has_videos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`playlists_has_videos` (
  `playlists_id` INT NOT NULL COMMENT 'Playlist ID',
  `videos_id` INT NOT NULL COMMENT 'ID of video included in playlist',
  PRIMARY KEY (`playlists_id`, `videos_id`),
  INDEX `fk_playlists_has_videos_videos1_idx` (`videos_id` ASC),
  INDEX `fk_playlists_has_videos_playlists1_idx` (`playlists_id` ASC),
  CONSTRAINT `fk_playlists_has_videos_playlists1`
    FOREIGN KEY (`playlists_id`)
    REFERENCES `youtube`.`playlists` (`playlists_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_playlists_has_videos_videos1`
    FOREIGN KEY (`videos_id`)
    REFERENCES `youtube`.`videos` (`videos_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`channels_has_videos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`channels_has_videos` (
  `channels_id` INT NOT NULL COMMENT 'Channel ID',
  `videos_id` INT NOT NULL COMMENT 'Video ID',
  PRIMARY KEY (`channels_id`, `videos_id`),
  INDEX `fk_channels_has_videos_videos1_idx` (`videos_id` ASC),
  INDEX `fk_channels_has_videos_channels1_idx` (`channels_id` ASC),
  CONSTRAINT `fk_channels_has_videos_channels1`
    FOREIGN KEY (`channels_id`)
    REFERENCES `youtube`.`channels` (`channels_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_channels_has_videos_videos1`
    FOREIGN KEY (`videos_id`)
    REFERENCES `youtube`.`videos` (`videos_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`comments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`comments` (
  `comments_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Comment ID',
  `comments_text` TEXT NOT NULL COMMENT 'Text of comment',
  `comments_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Time comment posted',
  `videos_id` INT NOT NULL COMMENT 'ID for video where comment is posted',
  `users_id` INT NOT NULL COMMENT 'ID for user who posted the comment',
  PRIMARY KEY (`comments_id`),
  INDEX `fk_comments_videos1_idx` (`videos_id` ASC),
  INDEX `fk_comments_users1_idx` (`users_id` ASC),
  CONSTRAINT `fk_comments_videos1`
    FOREIGN KEY (`videos_id`)
    REFERENCES `youtube`.`videos` (`videos_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_comments_users1`
    FOREIGN KEY (`users_id`)
    REFERENCES `youtube`.`users` (`users_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`comment_likes_dislikes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`comment_likes_dislikes` (
  `comment_likes_dislikes_id` INT NOT NULL AUTO_INCREMENT,
  `comment_likes_dislikes_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `comment_likes_dislikes_type` ENUM('like', 'dislike') NOT NULL COMMENT 'Like OR dislike to the comment',
  `comments_id` INT NOT NULL COMMENT 'ID for comment that was liked or disliked',
  `users_id` INT NOT NULL COMMENT 'ID of user who liked/disliked comment',
  PRIMARY KEY (`comment_likes_dislikes_id`),
  INDEX `fk_comment_likes_dislikes_comments1_idx` (`comments_id` ASC),
  INDEX `fk_comment_likes_dislikes_users1_idx` (`users_id` ASC),
  CONSTRAINT `fk_comment_likes_dislikes_comments1`
    FOREIGN KEY (`comments_id`)
    REFERENCES `youtube`.`comments` (`comments_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_comment_likes_dislikes_users1`
    FOREIGN KEY (`users_id`)
    REFERENCES `youtube`.`users` (`users_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

